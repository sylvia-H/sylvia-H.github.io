<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Javascript on Sylvia&#39;s Babel</title>
    <link>https://sylvia-H.github.io/categories/javascript/</link>
    <description>Recent content in Javascript on Sylvia&#39;s Babel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>sylvie11gaia@gmail.com (Sylvia-H)</managingEditor>
    <webMaster>sylvie11gaia@gmail.com (Sylvia-H)</webMaster>
    <copyright>©2021, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 19 Sep 2021 20:13:11 +0800</lastBuildDate>
    
        <atom:link href="https://sylvia-H.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>型別名詞釋義：靜態型別/動態型別/隱性型別/強型別/弱型別</title>
        <link>https://sylvia-H.github.io/posts/20210919_language-type/</link>
        <pubDate>Sun, 19 Sep 2021 20:13:11 +0800</pubDate>
        <author>sylvie11gaia@gmail.com (Sylvia-H)</author>
        <atom:modified>Sun, 19 Sep 2021 20:13:11 +0800</atom:modified>
        <guid>https://sylvia-H.github.io/posts/20210919_language-type/</guid>
        <description>型別名詞釋義:
靜態型別 動態型別 隱性型別 強型別 弱型別

 在釐清 Javascript 的資料型別的過程中，一不小心踏入了這個名詞坑。
一開始只是想釐清 Javascript 的資料型別，讀到 MDN 一篇關於 JavaScript 的資料型別與資料結構的文章，文中出現「動態型別」一詞來說明 Javascript 的特性，為了弄清楚該詞的意思，結果一腳踏入無底坑洞&amp;hellip;
既然時間都花下去了，就來整理一下筆記吧。
靜態型別、編譯式語言 靜態型別的語言(statically typed language)在型別的管理上十分嚴謹，在語法撰寫時就會要求對變數型別有明確定義。
例如：
1  int x;   宣告變數的時候就已經規定了未來存入的值是怎樣的資料型別，如果已經用 int 宣告了 x，就代表 x 將不能被放入字串資料，而只能放入整數。
在變數宣告與初始化階段就把變數和型別進行靜態綁定，就稱之為 「靜態型別的語言」。
編譯式語言多半會是靜態型別的語言，在編譯時期就會事先定義的型別，進行型別檢查，若出現變數誤用，資料型態不正確的話，在編譯時期就能發現，降低執行時期的風險。
C、C++、Rust、Go、Visual Basic、Swift、Obj-C、Java 和 C# 就是屬於編譯式語言。
而什麼是編譯式語言呢？
也就是程式執行前先透過編譯器(compiler)將程式碼編譯後再執行的語言，就稱為編譯式語言(Compiled language)。過程如下：
程式碼 &amp;mdash;&amp;gt; 編譯器(compiler) &amp;mdash;&amp;gt; 機器碼(machine language) 隱性型別(implicitly typed)的靜態語言 有些靜態語言在宣告時，也不需要指定型別，而是透過隱性推導的方式來確認型別。例如傳統 C# 宣告變數時需要指定型別：
1  int x = 123;   但到了 C# 4.0 ，宣告變數就可以不用指定型別：
1  var n = 456;   但是其型別就是初始值的型別，宣告時已經進行初始化，不能在中途任意改變型別，所以骨子裡還是靜態型別語言，稱為隱性型別(implicitly typed)的靜態語言。
不同於隱性型別是透過編譯過程的推導而得知型別，顯性型別(explicitly typed)則是將型別作為語法宣告的一部份。
動態型別、直譯式語言 動態型別的語言(dynamically typed language)相較於靜態型別的語言，在型別的處理上較鬆散靈活。
以 Javascript 為例：
1 2 3 4 5 6 7  let x; x=&amp;#34;Hello&amp;#34;; console.</description>
        
        <dc:creator>Sylvia-H</dc:creator>
        <media:content url="https://sylvia-H.github.ioimages/posts/js/type_paraphrase.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Javascript</category>
            
          
        
        
          
            
              <category>Javascript</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
